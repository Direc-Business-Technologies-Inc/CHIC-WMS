// <auto-generated />
using System;
using DataManager.Services.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataManager.Services.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240201062335_AdjustModules")]
    partial class AdjustModules
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataManager.Models.Bins.BinAssignment", b =>
                {
                    b.Property<string>("BinCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PalletNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SONo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BinCode");

                    b.ToTable("OBAS");
                });

            modelBuilder.Entity("DataManager.Models.Bins.BinMapping", b =>
                {
                    b.Property<string>("WarehouseCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<string>("Shelf")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarehouseCode", "Shelf");

                    b.ToTable("OBMP");
                });

            modelBuilder.Entity("DataManager.Models.Bins.BinMappingPin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Aisle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Left")
                        .HasColumnType("real");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<float>("Radius")
                        .HasColumnType("real");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Top")
                        .HasColumnType("real");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseCode", "Shelf");

                    b.ToTable("BPM1");
                });

            modelBuilder.Entity("DataManager.Models.CertificateOfIrradiation.CertificateOfIrradiation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActualValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApproverIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApproverJobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApproverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApproverRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateOfIrradiationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPONo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocNo")
                        .HasColumnType("int");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IrradiationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturingLotNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QCOrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QCRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QCRequester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalNoOfBoxes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QCOrderNo");

                    b.ToTable("OCOI");
                });

            modelBuilder.Entity("DataManager.Models.Configurations.Modules", b =>
                {
                    b.Property<string>("ModuleId")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(254)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("IconGroup")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("IconSubGroup")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("LineNum")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("SubGroupName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("VARCHAR(32)");

                    b.Property<string>("WebLink")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("ModuleId");

                    b.ToTable("MODL");

                    b.HasData(
                        new
                        {
                            ModuleId = "USRM",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7283),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where you can create, update and delete user information.",
                            GroupName = "Administration",
                            Icon = "-",
                            IconGroup = "bx bx-home-circle",
                            IconSubGroup = "fa-solid fa-users",
                            LineNum = 0,
                            Name = "User Management",
                            SubGroupName = "Users",
                            WebLink = "/UserManagement"
                        },
                        new
                        {
                            ModuleId = "USRG",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7288),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where you can create, update and delete user group.",
                            GroupName = "Administration",
                            Icon = "-",
                            IconGroup = "bx bx-home-circle",
                            IconSubGroup = "fa-solid fa-users",
                            LineNum = 1,
                            Name = "User Group",
                            SubGroupName = "Users",
                            WebLink = "/UserGroup"
                        },
                        new
                        {
                            ModuleId = "DSBD",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7292),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where you can view the statistics of sales orders.",
                            GroupName = "Dashboard",
                            Icon = "bx bx-home-alt",
                            IconGroup = "bx bx-pie-chart-alt-2",
                            IconSubGroup = "-",
                            LineNum = 2,
                            Name = "Dashboard",
                            SubGroupName = "-",
                            WebLink = "/Home"
                        },
                        new
                        {
                            ModuleId = "DBNT",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7295),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where you can view sales orders that are to be received or dispatched.",
                            GroupName = "Dashboard",
                            Icon = "bx bx-home-alt",
                            IconGroup = "bx bx-pie-chart-alt-2",
                            IconSubGroup = "-",
                            LineNum = 3,
                            Name = "Dashboard Notification",
                            SubGroupName = "-",
                            WebLink = "/DashboardNotification"
                        },
                        new
                        {
                            ModuleId = "QCMT",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7299),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can create Inspection Plans for specific items.",
                            GroupName = "Quality Control",
                            Icon = "bx bx-search-alt",
                            IconGroup = "bx bx-search-alt",
                            IconSubGroup = "-",
                            LineNum = 4,
                            Name = "QC Maintenance",
                            SubGroupName = "-",
                            WebLink = "/QCMaintenance"
                        },
                        new
                        {
                            ModuleId = "QCOR",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7302),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can input QC Order details.",
                            GroupName = "Quality Control",
                            Icon = "bx bx-user-check",
                            IconGroup = "bx bx-search-alt",
                            IconSubGroup = "-",
                            LineNum = 5,
                            Name = "QC Order",
                            SubGroupName = "-",
                            WebLink = "/QCOrder"
                        },
                        new
                        {
                            ModuleId = "COAP",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7305),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can approve and print certificate of irradiation.",
                            GroupName = "Quality Control",
                            Icon = "fa fa-person-circle-check",
                            IconGroup = "bx bx-search-alt",
                            IconSubGroup = "-",
                            LineNum = 6,
                            Name = "COI Approval",
                            SubGroupName = "-",
                            WebLink = "/CertificateOfIrradiationApproval"
                        },
                        new
                        {
                            ModuleId = "BNMP",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7308),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can see map the bins.",
                            GroupName = "Bins",
                            Icon = "bx bx-map-pin",
                            IconGroup = "bx bx-cabinet",
                            IconSubGroup = "-",
                            LineNum = 7,
                            Name = "Bin Mapping",
                            SubGroupName = "-",
                            WebLink = "/BinMapping"
                        },
                        new
                        {
                            ModuleId = "BNDB",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7311),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can see the Bin Map and Bin Status.",
                            GroupName = "Bins",
                            Icon = "bx bx-map-alt",
                            IconGroup = "bx bx-cabinet",
                            IconSubGroup = "-",
                            LineNum = 8,
                            Name = "Bin Dashboard",
                            SubGroupName = "-",
                            WebLink = "/BinDashboard"
                        },
                        new
                        {
                            ModuleId = "RSCD",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7314),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can view the Receiving Schedule.",
                            GroupName = "Schedules",
                            Icon = "bx bxs-truck",
                            IconGroup = "bx bx-calendar",
                            IconSubGroup = "-",
                            LineNum = 9,
                            Name = "Receiving Schedule",
                            SubGroupName = "-",
                            WebLink = "/ReceivingSchedule"
                        },
                        new
                        {
                            ModuleId = "DSCD",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7318),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can view the Dispatch Schedule.",
                            GroupName = "Schedules",
                            Icon = "bx bx-package",
                            IconGroup = "bx bx-calendar",
                            IconSubGroup = "-",
                            LineNum = 10,
                            Name = "Dispatch Schedule",
                            SubGroupName = "-",
                            WebLink = "/DispatchSchedule"
                        },
                        new
                        {
                            ModuleId = "ISCD",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7321),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can view the Irradiation Schedule.",
                            GroupName = "Schedules",
                            Icon = "bx bx-shield",
                            IconGroup = "bx bx-calendar",
                            IconSubGroup = "-",
                            LineNum = 11,
                            Name = "Irradiation Schedule",
                            SubGroupName = "-",
                            WebLink = "/IrradiationSchedule"
                        },
                        new
                        {
                            ModuleId = "BLPR",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7324),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can print bin labels.",
                            GroupName = "Forms and Reports",
                            Icon = "bx bx-file",
                            IconGroup = "bx bx-printer",
                            IconSubGroup = "-",
                            LineNum = 12,
                            Name = "Bin Label Printing",
                            SubGroupName = "-",
                            WebLink = "/BinLabelPrinting"
                        },
                        new
                        {
                            ModuleId = "ILPR",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7331),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can print irradiation labels.",
                            GroupName = "Forms and Reports",
                            Icon = "bx bx-file",
                            IconGroup = "bx bx-printer",
                            IconSubGroup = "-",
                            LineNum = 13,
                            Name = "Irradiation Label Printing",
                            SubGroupName = "-",
                            WebLink = "/IrradiationLabelPrinting"
                        },
                        new
                        {
                            ModuleId = "PLPR",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7334),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can print pallet labels.",
                            GroupName = "Forms and Reports",
                            Icon = "bx bx-file",
                            IconGroup = "bx bx-printer",
                            IconSubGroup = "-",
                            LineNum = 14,
                            Name = "Pallet Label Printing",
                            SubGroupName = "-",
                            WebLink = "/PalletLabelPrinting"
                        },
                        new
                        {
                            ModuleId = "RCVN",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7337),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can receive sales orders.",
                            GroupName = "Inventory",
                            Icon = "bx bx-archive-in",
                            IconGroup = "bx bx-archive",
                            IconSubGroup = "-",
                            LineNum = 15,
                            Name = "Receiving",
                            SubGroupName = "-",
                            WebLink = "/Receiving"
                        },
                        new
                        {
                            ModuleId = "INVT",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7340),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can transfer inventory automatically.",
                            GroupName = "Inventory",
                            Icon = "bx bx-transfer",
                            IconGroup = "bx bx-archive",
                            IconSubGroup = "-",
                            LineNum = 16,
                            Name = "Inventory Transfer",
                            SubGroupName = "-",
                            WebLink = "/InventoryTransfer"
                        },
                        new
                        {
                            ModuleId = "DSPT",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7343),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can release items.",
                            GroupName = "Inventory",
                            Icon = "bx bx-archive-out",
                            IconGroup = "bx bx-archive",
                            IconSubGroup = "-",
                            LineNum = 17,
                            Name = "Dispatch",
                            SubGroupName = "-",
                            WebLink = "/Dispatch"
                        },
                        new
                        {
                            ModuleId = "MNTR",
                            Active = false,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(7351),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Description = "This is where user can transfer inventory manually.",
                            GroupName = "Inventory",
                            Icon = "bx bx-transfer",
                            IconGroup = "bx bx-archive",
                            IconSubGroup = "-",
                            LineNum = 18,
                            Name = "Manual Transfer",
                            SubGroupName = "-",
                            WebLink = "/InventoryTransfer/ManualTransfer"
                        });
                });

            modelBuilder.Entity("DataManager.Models.QCMaintenance.InspectionPlan", b =>
                {
                    b.Property<string>("InspectionPlanCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Approver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DosimeterLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectionPlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoOfSamples")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfDosimeters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallPassTolerancePercentage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SamplePassTolerancePercentage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalNumberOfBoxes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalWeight")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InspectionPlanCode", "Version");

                    b.ToTable("QCIP");
                });

            modelBuilder.Entity("DataManager.Models.QCMaintenance.InspectionPlanParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("InspectionPlanCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaxValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UoM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("InspectionPlanCode", "Version");

                    b.ToTable("CIP1");
                });

            modelBuilder.Entity("DataManager.Models.QCOrder.QCOrder", b =>
                {
                    b.Property<string>("QCOrderNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocNo")
                        .HasColumnType("int");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectionPlanCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectionPlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectionPlanType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufacturingLotNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("OverallPassTolerancePercentage")
                        .HasColumnType("real");

                    b.Property<string>("PONo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RefNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SamplePassTolerancePercentage")
                        .HasColumnType("real");

                    b.Property<int>("SampleSize")
                        .HasColumnType("int");

                    b.Property<string>("ServiceOrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageConditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UoM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("QCOrderNo");

                    b.ToTable("QCOR");
                });

            modelBuilder.Entity("DataManager.Models.QCOrder.QCOrderDosimetryReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActualEnergy")
                        .HasColumnType("int");

                    b.Property<int>("ActualFrequency")
                        .HasColumnType("int");

                    b.Property<int>("ActualPower")
                        .HasColumnType("int");

                    b.Property<string>("DosimetryReportNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EBOperationLog")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QCOrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalProductsAfterIrradiation")
                        .HasColumnType("int");

                    b.Property<int>("TotalProductsBeforeIrradiation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QCOrderNo")
                        .IsUnique();

                    b.ToTable("COR4");
                });

            modelBuilder.Entity("DataManager.Models.QCOrder.QCOrderParameterList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActualValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParameterNo")
                        .HasColumnType("int");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SampleId")
                        .HasColumnType("int");

                    b.Property<string>("TargetValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UoM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.ToTable("COR3");
                });

            modelBuilder.Entity("DataManager.Models.QCOrder.QCOrderSampleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Open")
                        .HasColumnType("int");

                    b.Property<string>("QCOrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalNoOfFailed")
                        .HasColumnType("int");

                    b.Property<int>("TotalNoOfPassed")
                        .HasColumnType("int");

                    b.Property<int>("TotalNoSamples")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QCOrderNo")
                        .IsUnique();

                    b.ToTable("COR1");
                });

            modelBuilder.Entity("DataManager.Models.QCOrder.QCOrderSampleList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfFailed")
                        .HasColumnType("int");

                    b.Property<int>("NoOfPassed")
                        .HasColumnType("int");

                    b.Property<string>("QABy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SampleId")
                        .HasColumnType("int");

                    b.Property<int>("SampleNo")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.ToTable("COR2");
                });

            modelBuilder.Entity("DataManager.Models.Users.UserDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte?>("Background")
                        .HasColumnType("tinyint");

                    b.Property<string>("Company")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)");

                    b.Property<string>("Department")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<byte?>("DisplayPicture")
                        .HasColumnType("tinyint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("VARCHAR(32)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("USRD");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = "Direc Business Technologies Inc",
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(6666),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            Department = "Administration",
                            Email = "admin@gmail.com",
                            FirstName = "Direc",
                            IsActive = true,
                            IsEmailConfirmed = false,
                            IsPhoneConfirmed = false,
                            LastName = "Admin",
                            MiddleName = "",
                            UserId = "eb6061c519c54f66a9807c5812726ed0"
                        });
                });

            modelBuilder.Entity("DataManager.Models.Users.UserGroups", b =>
                {
                    b.Property<int>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserGroupId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("VARCHAR(32)");

                    b.HasKey("UserGroupId");

                    b.ToTable("USRG");

                    b.HasData(
                        new
                        {
                            UserGroupId = 1,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(6992),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            GroupName = "Unset",
                            IsActive = true
                        },
                        new
                        {
                            UserGroupId = 2,
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(6997),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            GroupName = "Administrator",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("DataManager.Models.Users.UserLogins", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("VARCHAR(32)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)");

                    b.Property<DateTime?>("FailedAttempt")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<int>("FailedAttemptCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedoutEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<string>("LastPassword")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("LastPasswordSet")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime?>("ResetAttempt")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("VARCHAR(32)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.HasKey("UserId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("USRL");

                    b.HasData(
                        new
                        {
                            UserId = "eb6061c519c54f66a9807c5812726ed0",
                            CreatedDate = new DateTime(2024, 2, 1, 6, 23, 34, 728, DateTimeKind.Utc).AddTicks(6647),
                            CreatedUserId = "eb6061c519c54f66a9807c5812726ed0",
                            FailedAttemptCount = 0,
                            IsActive = true,
                            IsLocked = true,
                            IsLockedoutEnabled = true,
                            IsSuperUser = true,
                            IsTwoFactorEnabled = true,
                            Password = "Uxz7RIWltZj6xFSwsSx775FGJK6qcRCCA0z+dt8CcyNxsmS7N7Rmp0bn0S0mxjiS",
                            UserGroupId = 2,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("DataManager.Models.Users.UserModules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUpdate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<string>("CreatedUserId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DATETIME2(7)");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("VARCHAR(32)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("USRM");
                });

            modelBuilder.Entity("DataManager.Models.Bins.BinMappingPin", b =>
                {
                    b.HasOne("DataManager.Models.Bins.BinMapping", "BinMapping")
                        .WithMany("BinMappingPins")
                        .HasForeignKey("WarehouseCode", "Shelf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BinMapping");
                });

            modelBuilder.Entity("DataManager.Models.CertificateOfIrradiation.CertificateOfIrradiation", b =>
                {
                    b.HasOne("DataManager.Models.QCOrder.QCOrder", "QCOrder")
                        .WithMany()
                        .HasForeignKey("QCOrderNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QCOrder");
                });

            modelBuilder.Entity("DataManager.Models.QCMaintenance.InspectionPlanParameter", b =>
                {
                    b.HasOne("DataManager.Models.QCMaintenance.InspectionPlan", "InspectionPlan")
                        .WithMany("ParameterList")
                        .HasForeignKey("InspectionPlanCode", "Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InspectionPlan");
                });

            modelBuilder.Entity("DataManager.Models.QCOrder.QCOrderDosimetryReport", b =>
                {
                    b.HasOne("DataManager.Models.QCOrder.QCOrder", "QCOrder")
                        .WithOne("QCOrderDosimetryReport")
                        .HasForeignKey("DataManager.Models.QCOrder.QCOrderDosimetryReport", "QCOrderNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QCOrder");
                });

            modelBuilder.Entity("DataManager.Models.QCOrder.QCOrderParameterList", b =>
                {
                    b.HasOne("DataManager.Models.QCOrder.QCOrderSampleList", "QCOrderSampleList")
                        .WithMany("QCOrderParameterList")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QCOrderSampleList");
                });

            modelBuilder.Entity("DataManager.Models.QCOrder.QCOrderSampleDetail", b =>
                {
                    b.HasOne("DataManager.Models.QCOrder.QCOrder", "QCOrder")
                        .WithOne("QCOrderSampleDetail")
                        .HasForeignKey("DataManager.Models.QCOrder.QCOrderSampleDetail", "QCOrderNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QCOrder");
                });

            modelBuilder.Entity("DataManager.Models.QCOrder.QCOrderSampleList", b =>
                {
                    b.HasOne("DataManager.Models.QCOrder.QCOrderSampleDetail", "QCOrderSampleDetail")
                        .WithMany("QCOrderSampleList")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QCOrderSampleDetail");
                });

            modelBuilder.Entity("DataManager.Models.Users.UserDetails", b =>
                {
                    b.HasOne("DataManager.Models.Users.UserLogins", "UserLogins")
                        .WithOne("UserDetails")
                        .HasForeignKey("DataManager.Models.Users.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLogins");
                });

            modelBuilder.Entity("DataManager.Models.Users.UserLogins", b =>
                {
                    b.HasOne("DataManager.Models.Users.UserGroups", "UserGroup")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("DataManager.Models.Users.UserModules", b =>
                {
                    b.HasOne("DataManager.Models.Configurations.Modules", "Modules")
                        .WithMany("UserModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataManager.Models.Users.UserGroups", "UserGroups")
                        .WithMany("UserModules")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modules");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("DataManager.Models.Bins.BinMapping", b =>
                {
                    b.Navigation("BinMappingPins");
                });

            modelBuilder.Entity("DataManager.Models.Configurations.Modules", b =>
                {
                    b.Navigation("UserModules");
                });

            modelBuilder.Entity("DataManager.Models.QCMaintenance.InspectionPlan", b =>
                {
                    b.Navigation("ParameterList");
                });

            modelBuilder.Entity("DataManager.Models.QCOrder.QCOrder", b =>
                {
                    b.Navigation("QCOrderDosimetryReport")
                        .IsRequired();

                    b.Navigation("QCOrderSampleDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("DataManager.Models.QCOrder.QCOrderSampleDetail", b =>
                {
                    b.Navigation("QCOrderSampleList");
                });

            modelBuilder.Entity("DataManager.Models.QCOrder.QCOrderSampleList", b =>
                {
                    b.Navigation("QCOrderParameterList");
                });

            modelBuilder.Entity("DataManager.Models.Users.UserGroups", b =>
                {
                    b.Navigation("UserLogins");

                    b.Navigation("UserModules");
                });

            modelBuilder.Entity("DataManager.Models.Users.UserLogins", b =>
                {
                    b.Navigation("UserDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
